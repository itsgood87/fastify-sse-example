{"version":3,"file":"parcel-transformer-liquid.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { Transformer } from '@parcel/plugin';\nimport { Liquid, defaultOptions } from 'liquidjs';\nimport fs from 'fs';\nimport path from 'path';\n\ntype LiquidOptions = Partial<typeof defaultOptions>;\n\nexport default new Transformer({\n  async loadConfig({ config }) {\n    const configFiles = [\n      '.liquidrc',\n      '.liquidrc.js',\n      '.liquidrc.cjs',\n      'liquid.config.js',\n      'liquid.config.cjs',\n    ];\n\n    const { contents, filePath } =\n      (await config.getConfig<LiquidOptions>(configFiles)) || {};\n\n    if (filePath) {\n      if (filePath.endsWith('.js')) {\n        config.invalidateOnStartup();\n      }\n\n      config.invalidateOnFileChange(filePath);\n    }\n\n    return contents;\n  },\n  async transform({ asset, config, options }) {\n    const conf: LiquidOptions = config;\n    const engine = new Liquid(conf);\n    const code = await asset.getCode();\n    const template = await engine.parseAndRender(code);\n\n    if (conf.root?.length > 0) {\n      let deps: string[] = [];\n\n      for (const dir of conf.root) {\n        const files = fs\n          .readdirSync(dir)\n          .map(filePath => path.join(dir, filePath));\n\n        deps = deps.concat(files);\n      }\n\n      for (const dep of deps) {\n        await asset.invalidateOnFileChange(\n          path.resolve(options.projectRoot, dep),\n        );\n      }\n    }\n\n    asset.setCode(template);\n    asset.type = 'html';\n\n    return [asset];\n  },\n});\n"],"names":["Transformer","loadConfig","config","configFiles","_context","getConfig","contents","_ref2","filePath","endsWith","invalidateOnStartup","invalidateOnFileChange","transform","asset","options","engine","Liquid","conf","_context3","getCode","code","parseAndRender","template","root","_conf$root","length","deps","_loop","files","fs","readdirSync","dir","map","path","join","concat","_iterator","_iterator2","dep","resolve","projectRoot","setCode","type"],"mappings":"2zPAOe,IAAIA,cAAY,CACvBC,sIAOH,OAPgBC,IAAAA,OACXC,EAAc,CAClB,YACA,eACA,gBACA,mBACA,qBACDC,SAGQF,EAAOG,UAAyBF,GAAY,OAAA,GAAAC,kBAAAA,SAAA,MAAAA,KAAK,GAAE,OAQ3D,OATOE,GACoDC,QADpDD,UAAUE,IAAAA,YAIZA,EAASC,SAAS,QACpBP,EAAOQ,sBAGTR,EAAOS,uBAAuBH,sBAGzBF,GAAQ,QAAA,UAAA,6BAEXM,uJAE2B,OAFfC,IAAAA,MAAeC,IAAAA,QAEzBC,EAAS,IAAIC,SADbC,IADiBf,QAEQgB,SACZL,EAAMM,UAAS,OAAxB,OAAJC,SAAIF,SACaH,EAAOM,eAAeD,GAAK,OAApC,GAARE,qBAEFL,EAAKM,aAALC,EAAWC,QAAS,IAACP,UAAA,MACnBQ,EAAiB,GAAEC,yBAAA,QAAA,6BAAA,6BAAA,OAGfC,EAAQC,EACXC,YAFMC,WAGNC,KAAI,SAAAxB,GAAQ,OAAIyB,EAAKC,KAAKH,EAAKvB,MAElCkB,EAAOA,EAAKS,OAAOP,GAAO,OAAA,UAAA,yBAAAQ,IALVnB,EAAKM,MAAI,QAAA,iBAAAL,UAAA,MAAA,oCAAA,QAAAA,UAAA,MAAA,QAAAmB,IAQTX,GAAI,QAAA,iBAAAR,UAAA,MAAR,OAAHoB,UAAGpB,UACNL,EAAMF,uBACVsB,EAAKM,QAAQzB,EAAQ0B,YAAaF,IACnC,QAAApB,UAAA,MAAA,QAKe,OADpBL,EAAM4B,QAAQnB,GACdT,EAAM6B,KAAO,yBAEN,CAAC7B,IAAM,QAAA,UAAA"}